### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@testset "Running test case1 for ActiveSuspensionWithReverseCausality" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = ActiveSuspensionWithReverseCausality()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.wheel.mass.s][1] ≈ 0.5
  @test sol[model.seat.mass.s][1] ≈ 1.5
  @test sol[model.car_and_suspension.mass.s][1] ≈ 1
  @test sol[model.wheel.mass.v][1] ≈ 0
  @test sol[model.wheel.spring_damper.initial_stretch][1] ≈ 112
  @test sol[model.car_and_suspension.mass.v][1] ≈ 0
  @test sol[model.car_and_suspension.spring_damper.initial_stretch][1] ≈ 0.6
  @test sol[model.seat.mass.v][1] ≈ 0
  @test sol[model.seat.spring_damper.initial_stretch][1] ≈ 0
  @test sol[model.rev_causality.y][1] ≈ -500
  @test sol[model.wheel.mass.s][end] ≈ 0.50042654
  @test sol[model.seat.mass.s][end] ≈ 1.5
  @test sol[model.car_and_suspension.mass.s][end] ≈ 0.99786154
  @test sol[model.wheel.mass.v][end] ≈ -0.00256717338
  @test sol[model.wheel.spring_damper.initial_stretch][end] ≈ 112
  @test sol[model.car_and_suspension.mass.v][end] ≈ -0.0041980752
  @test sol[model.car_and_suspension.spring_damper.initial_stretch][end] ≈ 0.6
  @test sol[model.seat.mass.v][end] ≈ 0
  @test sol[model.seat.spring_damper.initial_stretch][end] ≈ 0
  @test sol[model.rev_causality.y][end] ≈ -497.8573432765645
# Signals selected for regression testing: ["wheel.mass.s","seat.mass.s","car_and_suspension.mass.s","wheel.mass.v","car_and_suspension.mass.v","seat.mass.v","rev_causality.y"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.wheel.mass.s) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.seat.mass.s) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig2.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.car_and_suspension.mass.s) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig3.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.wheel.mass.v) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig4.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.car_and_suspension.mass.v) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig5.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.seat.mass.v) for t in ref_times]))
    CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig6.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.rev_causality.y) for t in ref_times]))
  end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig0.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.wheel.mass.s) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.wheel.mass.s])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.wheel.mass.s], width=2, label="Actual value of wheel.mass.s")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of wheel.mass.s")
        plot!([df.t[1]], [0.5], seriestype=:scatter, label="Initial Condition for wheel.mass.s")
        plot!([df.t[end]], [0.50042654], seriestype=:scatter, label="Final Condition for wheel.mass.s")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.wheel.mass.s) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig1.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig1.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.seat.mass.s) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.seat.mass.s])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig1.ref", DataFrame)
        plot(sol, idxs=[model.seat.mass.s], width=2, label="Actual value of seat.mass.s")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of seat.mass.s")
        plot!([df.t[1]], [1.5], seriestype=:scatter, label="Initial Condition for seat.mass.s")
        plot!([df.t[end]], [1.5], seriestype=:scatter, label="Final Condition for seat.mass.s")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig1.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.seat.mass.s) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig2.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig2.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.car_and_suspension.mass.s) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.car_and_suspension.mass.s])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig2.ref", DataFrame)
        plot(sol, idxs=[model.car_and_suspension.mass.s], width=2, label="Actual value of car_and_suspension.mass.s")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of car_and_suspension.mass.s")
        plot!([df.t[1]], [1], seriestype=:scatter, label="Initial Condition for car_and_suspension.mass.s")
        plot!([df.t[end]], [0.99786154], seriestype=:scatter, label="Final Condition for car_and_suspension.mass.s")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig2.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig2.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.car_and_suspension.mass.s) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig3.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig3.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.wheel.mass.v) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.wheel.mass.v])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig3.ref", DataFrame)
        plot(sol, idxs=[model.wheel.mass.v], width=2, label="Actual value of wheel.mass.v")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of wheel.mass.v")
        plot!([df.t[1]], [0], seriestype=:scatter, label="Initial Condition for wheel.mass.v")
        plot!([df.t[end]], [-0.00256717338], seriestype=:scatter, label="Final Condition for wheel.mass.v")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig3.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig3.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.wheel.mass.v) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig4.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig4.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.car_and_suspension.mass.v) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.car_and_suspension.mass.v])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig4.ref", DataFrame)
        plot(sol, idxs=[model.car_and_suspension.mass.v], width=2, label="Actual value of car_and_suspension.mass.v")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of car_and_suspension.mass.v")
        plot!([df.t[1]], [0], seriestype=:scatter, label="Initial Condition for car_and_suspension.mass.v")
        plot!([df.t[end]], [-0.0041980752], seriestype=:scatter, label="Final Condition for car_and_suspension.mass.v")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig4.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig4.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.car_and_suspension.mass.v) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig5.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig5.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.seat.mass.v) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.seat.mass.v])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig5.ref", DataFrame)
        plot(sol, idxs=[model.seat.mass.v], width=2, label="Actual value of seat.mass.v")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of seat.mass.v")
        plot!([df.t[1]], [0], seriestype=:scatter, label="Initial Condition for seat.mass.v")
        plot!([df.t[end]], [0], seriestype=:scatter, label="Final Condition for seat.mass.v")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig5.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig5.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.seat.mass.v) for t in ref_times]))
    end
    if isfile("snapshots/ActiveSuspensionWithReverseCausality_case1_sig6.ref")
      ref = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig6.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.rev_causality.y) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.rev_causality.y])
        dfr = CSV.read("snapshots/ActiveSuspensionWithReverseCausality_case1_sig6.ref", DataFrame)
        plot(sol, idxs=[model.rev_causality.y], width=2, label="Actual value of rev_causality.y")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of rev_causality.y")
        plot!([df.t[1]], [-500], seriestype=:scatter, label="Initial Condition for rev_causality.y")
        plot!([df.t[end]], [-497.8573432765645], seriestype=:scatter, label="Final Condition for rev_causality.y")
        mkpath("comparisons")
        savefig("comparisons/ActiveSuspensionWithReverseCausality_case1_sig6.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/ActiveSuspensionWithReverseCausality_case1_sig6.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.rev_causality.y) for t in ref_times]))
    end
end
